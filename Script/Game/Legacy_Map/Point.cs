using System;

namespace Map
{
	public class Point : IEquatable<Point>
	{
		public int x;
		public int y;

		public Point(int x, int y)
		{
			this.x = x;
			this.y = y;
		}

		// * override and AutoGenerated.
		public bool Equals(Point other)
		{
			if (ReferenceEquals(null, other))
				return false;
			if (ReferenceEquals(this, other))
				return true;

			if (x == other.x && y == other.y)
				return true;
			else
				return false;
		}
		
		// override object.Equals
		public override bool Equals(object obj)
		{
			if (ReferenceEquals(null, obj))
				return false;
			if (ReferenceEquals(this, obj))
				return true;

			if (obj == null || GetType() != obj.GetType())
				return false;
			
			return Equals ((Point)obj);
		}
		
		// override object.GetHashCode
		public override int GetHashCode()
		{
			unchecked
			{
				return (x * 397) ^ y;
			}
		}

		public override string ToString()
		{
			return $"({x}, {y})";
		}
	}
}
